{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","evento","preventDefault","trim","length","catgs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gif","map","img","title","id","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbW,SAACC,GAElBA,EAAOC,iBAEHJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OAE5CN,EAAc,KAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBe,SAACP,GACxBF,EAAcE,EAAOQ,OAAOF,a,+BCPvBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAMD,EAAKE,KAAK,SAAAC,GAClB,MAAO,CACHC,MAAOD,EAAIC,MACXC,GAAIF,EAAIE,GACRV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAEL,GAEzB,OACI,sBAAKM,UAAU,6CAAf,UACI,qBAAKC,IAAMP,EAAIR,IAAMgB,IAAMR,EAAIC,QAC/B,kCAAMD,EAAIC,MAAV,WCHCQ,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEPxB,EAASC,GAAWwB,MAAM,SAACC,GACvBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGR,CAACpB,IAEGqB,EDhB0BM,CAAc3B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAEpB,OACG,qCACI,mCAAOpB,EAAP,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAAiCA,GAAdA,EAAIE,aEYhCgB,EAxBM,WAEjB,MAAoC1C,mBAAU,CAAC,WAA/C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCXlC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c092bdfa.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ( { setCategories } ) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInpuntChange = (evento) => {\n        setInputValue(evento.target.value)\n    };\n\n    const handleSubmit = (evento) => {\n        //prevent refresh the page\n        evento.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( catgs => [inputValue, ...catgs] );\n        }\n        setInputValue('');\n\n        //console.log(evento.target);\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type='text'\n                value={ inputValue }\n                onChange={ handleInpuntChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}","export const getGifs = async( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=DV1cpKHjCbDw5jN4OU3wb1LhZv9CFobj`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    \n    const gif = data.map( img => {\n        return {\n            title: img.title,\n            id: img.id,\n            url: img.images.downsized_medium.url,\n        };\n    });\n    \n    return gif;\n};","import React from 'react'\n\nexport const GifGridItem = ( img ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeInDown\">\n            <img src={ img.url } alt={ img.title } />\n            <p> { img.title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n     return (\n        <>\n            <h3> { category } </h3> \n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( (img) => (\n                        <GifGridItem key={ img.id } { ...img } />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\n//fixed_width_downsampled","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/GetGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect( () => {\n        \n        getGifs( category ).then( (imgs) => {\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                })\n            }, 3000);\n        })\n\n    }, [category]);\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState( ['Naruto'] );\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}